#include <iostream>
#include <stdlib.h>
#include <stdio.h> 
#include <math.h> 

using namespace std;

int main()
{
    double p0, p1,p2, TOL, it, p, fp0,fp1,fp2, fp;
    double h1, h2, s1, s2, b,d,E,h,D;
    int i = 1;
    
    cout <<"------METODO DE MULLER------\n";
    //cout <<"Ingrese cantidad de iteraciones: ";
    //cin >>it;
    cout <<"Ingrese el valor Po: ";
    cin >>p0;
    cout <<"Ingrese el valor P1: ";
    cin >>p1;
    cout <<"Ingrese el valor P1: ";
    cin >>p2;
    cout <<"Ingrese la TOLERANCIA: ";
    cin >>TOL;
    
    //EJERCICIO 1:
    fp0 = pow(p0,5) + (11*pow(p0,4)) - (21*pow(p0,3)) - (10*pow(p0,2)) - (21*p0) - 5;
    fp1 = pow(p1,5) + (11*pow(p1,4)) - (21*pow(p1,3)) - (10*pow(p1,2)) - (21*p1) - 5;
    fp2 = pow(p2,5) + (11*pow(p2,4)) - (21*pow(p2,3)) - (10*pow(p2,2)) - (21*p2) - 5;
    
    /*EJERCICIO 2:
    fp0 = pow(p0,4) + pow(p0,3) + (3*pow(p0,2)) + (2*p0) + 2;
    fp1 = pow(p1,4) + pow(p1,3) + (3*pow(p1,2)) + (2*p1) + 2;
    fp2 = pow(p2,4) + pow(p2,3) + (3*pow(p2,2)) + (2*p2) + 2;
    */
    
    /*EJERCICIO 3:
    fp0 = pow(p0,3) - (9*pow(p0,3)) + 12;
    fp1 = pow(p1,3) - (9*pow(p1,3)) + 12;
    fp2 = pow(p2,3) - (9*pow(p2,3)) + 12;
    */

    cout <<"VALOR f(x0): ";
    cout <<fp0<<"\n";
    
    cout <<"VALOR f(x1): ";
    cout <<fp1<<"\n";
    
    cout <<"VALOR f(x2): ";
    cout <<fp2<<"\n";
    cout <<"______________________________________________ \n";
    cout<<"TABLA DE VALORES: \n";
    cout <<"______________________________________________ \n";
    cout<<" IT   P   F(P)    ERROR(ABS)    \n";
    cout <<"______________________________________________ \n";
    h1 = p1 - p0;
    h2 = p2 - p1;
    s1 = (fp1 - fp0)/h1;
    s2 = (fp2 - fp1)/h2;
    d = (s2-s1)/(h2+h1);
    while (i<100){
        b = s2 + (h2*d);
        D = pow((pow(b,2)- (4*fp2*d)),1/2);
        if(abs(b-D) < abs(b+D)){
            E = b+D;
        }else{
            E = b-D;
        }
        h = (-2*fp2) / E;
        p = p2 + h;
        
        if(abs(h)<=TOL){
            cout<<"EL VALOR DE LA RAIZ ES: ";
            cout << p<<"\n";
            i = 100;
        }
        p0 = p1;
        p1 = p2;
        p2 = p;
        h1 = p1 - p0;
        h2 = p2 - p1;
        
        fp0 = pow(p0,5) + (11*pow(p0,4)) - (21*pow(p0,3)) - (10*pow(p0,2)) - (21*p0) - 5;
        fp1 = pow(p1,5) + (11*pow(p1,4)) - (21*pow(p1,3)) - (10*pow(p1,2)) - (21*p1) - 5;
        fp2 = pow(p2,5) + (11*pow(p2,4)) - (21*pow(p2,3)) - (10*pow(p2,2)) - (21*p2) - 5;
        s1 = (fp1 - fp0)/h1;
        s2 = (fp2 - fp1)/h2;
        d = (s2-s1)/(h2+h1);
        cout<<i <<"     ";
        cout<<p <<"     ";
        cout<<fp2 <<"     ";
        cout<<E <<"     \n";
        
        i = i + 1;
    }
    
}


Iteration	u	v	w	x	y	z
1	-1.625	0.5	-2.5	2.1429	-2.95	2.6111
2	-1.005	2.7333	-0.7125	0.6804	-2.0083	3.2141
3	-2.3699	1.5257	-1.5299	1.6527	-3.3475	2.9366
4	-1.5471	2.3808	-0.5792	0.7262	-2.6608	3.0177
5	-2.2343	1.6765	-1.3013	1.2431	-3.2759	2.944
6	-1.7906	2.2426	-0.8058	0.7898	-2.7886	3.0519
7	-2.1723	1.8324	-1.1705	1.1578	-3.1475	2.9807
8	-1.8768	2.1344	-0.8641	0.8921	-2.8847	3.0164
9	-2.0896	1.8936	-1.0949	1.0859	-3.0921	2.9811
10	-1.9281	2.0782	-0.9284	0.931	-2.9318	3.0128
11	-2.0557	1.9415	-1.0577	1.0506	-3.0508	2.9923
12	-1.9591	2.0458	-0.9564	0.9624	-2.9605	3.0068
13	-2.0311	1.965	-1.0321	1.0295	-3.0304	2.9943
14	-1.9758	2.0262	-0.9752	0.9774	-2.9772	3.0039
15	-2.0184	1.98	-1.0192	1.0169	-3.0173	2.9971
16	-1.9862	2.0154	-0.9855	0.9871	-2.9867	3.0024
17	-2.0106	1.9883	-1.0109	1.0099	-3.0101	2.9982
18	-1.9919	2.0088	-0.9916	0.9925	-2.9923	3.0013
19	-2.0061	1.9933	-1.0064	1.0057	-3.0059	2.999
20	-1.9953	2.0052	-0.9952	0.9956	-2.9955	3.0008
21	-2.0036	1.9961	-1.0037	1.0033	-3.0034	2.9994
22	-1.9973	2.003	-0.9972	0.9975	-2.9974	3.0004
23	-2.0021	1.9977	-1.0021	1.0019	-3.002	2.9997
24	-1.9984	2.0017	-0.9984	0.9985	-2.9985	3.0003
25	-2.0012	1.9987	-1.0012	1.0011	-3.0011	2.9998


Iteration	u	v	w	x	y	z
1	-1.625	0.5	-1.8229	2.3661	-2.6031	2.8993
2	-0.9294	2.2792	-0.8853	1.2101	-3.1612	3.1357
3	-1.9817	1.9964	-0.9088	0.9058	-3.0056	2.9999
4	-2.0462	1.9562	-1.02	0.9907	-2.9765	2.9947
5	-1.993	2.0022	-1.0072	1.0134	-2.9995	3.0001
6	-1.9939	2.0034	-0.997	1.0006	-3.0023	3.0006
7	-2.0006	1.9992	-0.9994	0.9986	-2.9998	3
8	-2.0005	1.9996	-1.0004	1.0001	-2.9997	2.9999
9	-1.9999	2.0001	-1	1.0002	-3	3
